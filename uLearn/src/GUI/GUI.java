package GUI;


import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import static com.intellij.uiDesigner.core.GridConstraints.*;
import static com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW;
import static java.awt.Font.*;

public class GUI {
    public JPanel Master_Window;
    public JPanel Login_Panel;
    private JTextPane passwordLabel;
    private JTextPane usernameLabel;
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton signInButton;

    public JPanel Main_Panel;
    private JTabbedPane tabMenu;
    private JEditorPane thisIsTheHomeEditorPane;
    private JPanel homeTab;
    private JPanel chatTab;
    private JPanel calenderTab;
    private JPanel storageTab;
    private JPanel settingsTab;
    private JTextPane userSettingsTextPane;


    public GUI() {
        Master_Window.removeAll();
        Master_Window.repaint();
        Master_Window.revalidate();

        Master_Window.add(Login_Panel);
        Master_Window.repaint();
        Master_Window.revalidate();
        Master_Window.setFont(new Font("Droid Sans", PLAIN, 20));

        signInButton.addActionListener(new ActionListener() {
            @Override public void actionPerformed(ActionEvent e) {
                // Will eventually use getPassword() to improve security
                Boolean certified = verifyUser(usernameField.getText(), passwordField.getText());
                if (certified) {
                    changePanel(Main_Panel);
                }
            }
        });
    }

    public void changePanel(JPanel child) {

        Master_Window.removeAll();
        Master_Window.repaint();
        Master_Window.revalidate();

        Master_Window.add(child);
        Master_Window.repaint();
        Master_Window.setFont(new Font("Droid Sans", PLAIN, 20));
        Master_Window.revalidate();
    }

    public Boolean verifyUser(String username, String password) {
        // Method to check validity of username and Password
        // Actual certification will be a part of the backend. For now it assumes true.
        String content = "Username: " + username + "\n";
        content += "Password: " + password;
        JOptionPane.showMessageDialog(null, content);
        return true;
    }

    private void createUIComponents() {

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Master_Window = new JPanel();
        Master_Window.setLayout(new CardLayout(0, 0));
        Master_Window.setEnabled(true);
        Master_Window.setBorder(BorderFactory
                .createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.CENTER,
                        TitledBorder.TOP, this.$$$getFont$$$("Droid Sans", Font.PLAIN, -1, Master_Window.getFont())));
        Login_Panel = new JPanel();
        Login_Panel.setLayout(new GridBagLayout());
        Login_Panel.setOpaque(true);
        Master_Window.add(Login_Panel, "Card1");
        passwordLabel = new JTextPane();
        passwordLabel.setEditable(false);
        passwordLabel.setOpaque(false);
        passwordLabel.setText("Password:");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.ipadx = 10;
        gbc.insets = new Insets(2, 10, 2, 5);
        Login_Panel.add(passwordLabel, gbc);
        usernameLabel = new JTextPane();
        usernameLabel.setEditable(false);
        usernameLabel.setOpaque(false);
        usernameLabel.setText("Username:");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.ipadx = 10;
        gbc.insets = new Insets(5, 10, 2, 5);
        Login_Panel.add(usernameLabel, gbc);
        passwordField = new JPasswordField();
        passwordField.setOpaque(false);
        passwordField.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 10;
        gbc.insets = new Insets(2, 5, 2, 10);
        Login_Panel.add(passwordField, gbc);
        usernameField = new JTextField();
        usernameField.setOpaque(false);
        usernameField.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 10;
        gbc.insets = new Insets(5, 5, 2, 10);
        Login_Panel.add(usernameField, gbc);
        signInButton = new JButton();
        signInButton.setBackground(new Color(-9240543));
        Font signInButtonFont = this.$$$getFont$$$("Droid Sans", -1, -1, signInButton.getFont());
        if (signInButtonFont != null) signInButton.setFont(signInButtonFont);
        signInButton.setForeground(new Color(-1));
        signInButton.setInheritsPopupMenu(true);
        signInButton.setOpaque(true);
        signInButton.setText("Sign In");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.ipadx = 10;
        gbc.insets = new Insets(2, 5, 5, 10);
        Login_Panel.add(signInButton, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        Login_Panel.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        Login_Panel.add(spacer2, gbc);
        Main_Panel = new JPanel();
        Main_Panel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        Master_Window.add(Main_Panel, "Card2");
        tabMenu = new JTabbedPane();
        tabMenu.setTabLayoutPolicy(1);
        Main_Panel.add(tabMenu,
                new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                        new Dimension(100, 100), new Dimension(400, 250), new Dimension(1000, 1000), 0, false));
        homeTab = new JPanel();
        homeTab.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        tabMenu.addTab("Home", homeTab);
        thisIsTheHomeEditorPane = new JEditorPane();
        thisIsTheHomeEditorPane.setEditable(true);
        thisIsTheHomeEditorPane.setOpaque(false);
        thisIsTheHomeEditorPane.setText("This is the Home Page");
        homeTab.add(thisIsTheHomeEditorPane,
                new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                        GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null,
                        new Dimension(150, 50), null, 0, false));
        final Spacer spacer3 = new Spacer();
        homeTab.add(spacer3,
                new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        homeTab.add(spacer4,
                new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                        GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        chatTab = new JPanel();
        chatTab.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabMenu.addTab("Chat", chatTab);
        calenderTab = new JPanel();
        calenderTab.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabMenu.addTab("Calender", calenderTab);
        storageTab = new JPanel();
        storageTab.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabMenu.addTab("Storage", storageTab);
        settingsTab = new JPanel();
        settingsTab.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        settingsTab.setForeground(new Color(-4473925));
        settingsTab.setOpaque(true);
        tabMenu.addTab("Settings", settingsTab);
        userSettingsTextPane = new JTextPane();
        userSettingsTextPane.setAlignmentX(0.5f);
        userSettingsTextPane.setEditable(false);
        userSettingsTextPane.setEnabled(true);
        Font userSettingsTextPaneFont = this.$$$getFont$$$("Droid Sans", Font.BOLD, 26, userSettingsTextPane.getFont());
        if (userSettingsTextPaneFont != null) userSettingsTextPane.setFont(userSettingsTextPaneFont);
        userSettingsTextPane.setForeground(new Color(-15847821));
        userSettingsTextPane.setOpaque(false);
        userSettingsTextPane.setText("User Settings");
        settingsTab.add(userSettingsTextPane,
                new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null,
                        new Dimension(150, 50), null, 0, false));
        final Spacer spacer5 = new Spacer();
        settingsTab.add(spacer5,
                new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                        GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {resultName = currentFont.getName();} else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {resultName = fontName;} else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(),
                size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() { return Master_Window; }

}
